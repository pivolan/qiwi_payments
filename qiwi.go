package qiwi_payments

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
	"time"
)

func QiwiBillPayment(tokenSecret string, billId string, themeCode string, amount string, comment string) (result ResponseQiwiPaymentBill, ResultError ResponseQiwiPaymentBillError, err error) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	data := Payload{
		Amount: Amount{
			Currency: "RUB",
			Value:    amount,
		},
		Comment:            comment,
		ExpirationDateTime: time.Now().Add(time.Hour).Format(time.RFC3339),
		CustomFields:       CustomFields{ThemeCode: themeCode},
	}
	payloadBytes, err := json.Marshal(data)
	if err != nil {
		return
	}
	bodyRequest := bytes.NewReader(payloadBytes)

	req, err := http.NewRequest("PUT", fmt.Sprintf("https://api.qiwi.com/partner/bill/v1/bills/%s", billId), bodyRequest)
	if err != nil {
		return
	}
	req.Header.Set("Accept", "application/json")
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", tokenSecret))

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	defer http.DefaultClient.CloseIdleConnections()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return
	}
	if strings.Contains(string(body), "errorCode") {
		err = json.Unmarshal(body, &ResultError)
		if err != nil {
			return
		}
		err = fmt.Errorf("%s", ResultError.Description)
	} else {
		err = json.Unmarshal(body, &result)
		if err != nil {
			return
		}
	}
	return
}
func QiwiCheckStatus(tokenSecret string, billId string) (result ResponseQiwiPaymentBill, ResultError ResponseQiwiPaymentBillError, err error) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	req, err := http.NewRequest("GET", fmt.Sprintf("https://api.qiwi.com/partner/bill/v1/bills/%s", billId), nil)
	if err != nil {
		return
	}
	req.Header.Set("Accept", "application/json")
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", tokenSecret))

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	defer http.DefaultClient.CloseIdleConnections()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return
	}
	if strings.Contains(string(body), "errorCode") {
		err = json.Unmarshal(body, &ResultError)
		if err != nil {
			return
		}
	} else {
		err = json.Unmarshal(body, &result)
		if err != nil {
			return
		}
	}
	return
}
